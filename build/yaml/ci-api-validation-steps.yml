parameters:
  libraries: []

steps:
- task: DownloadPipelineArtifact@1
  displayName: 'Download BotBuilderDLLs artifact'
  inputs:
    artifactName: 'BotBuilderDLLs-Debug-Windows-netcoreapp31'
    targetPath: '$(System.ArtifactsDirectory)/Artifacts'
- ${{ each library in parameters.libraries }}:
    - task: NuGetCommand@2
      displayName: 'NuGet Install Target: ${{ library }}'
      inputs:
        command: custom
        arguments: 'install ${{ library }} -Version $(ApiCompatVersion) -OutputDirectory $(System.DefaultWorkingDirectory)\DownloadedNuGet'

    - task: SOUTHWORKS.binaries-comparer.custom-build-release-task.binaries-comparer@0
      displayName: 'Compare Binaries: ${{ library }}'
      inputs:
        contractsRootFolder: 'DownloadedNuGet\${{ library }}.$(ApiCompatVersion)\lib\netstandard2.0'
        contractsFileName: '${{ library }}.dll'
        implFolder: '$(System.ArtifactsDirectory)/Artifacts'
        failOnIssue: true
        resolveFx: false
        generateLog: true
        outputFilename: '${{ library }}.$(ApiCompatVersion).CompatResults.txt'
        outputFolder: '$(Build.ArtifactStagingDirectory)'
        useBaseline: false

    - powershell: |
       $FileName = "$(Build.ArtifactStagingDirectory)\${{ library }}.$(ApiCompatVersion).CompatResults.txt"
       $FileContent = @(Get-Content $FileName)

       $FileContent[0] = $FileContent[0] + " compared against [version $(ApiCompatVersion)](https://www.nuget.org/packages/${{ library }}/$(ApiCompatVersion))"

       if ($FileContent.Length -eq 1) {
       [system.io.file]::WriteAllText($fileName,$FileContent)
       } else {
       Set-Content $fileName $FileContent
       }
       Write-Host "The updated line 1: `n$FileContent[0]"
      displayName: 'Insert nuget link into ApiCompat results file.'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Compat Results artifact'
      inputs:
        ArtifactName: '${{ library }}.$(ApiCompatVersion).CompatResults'
