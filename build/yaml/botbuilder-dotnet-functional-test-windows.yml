#
# Run functional tests on bot deployed to Azure Windows
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)

pool:
  vmImage: 'windows-2019'

trigger: # ci trigger
  branches:
    include:
     - master
  paths:
    include:
      - '*'
    exclude:
      - doc/
      - specs/
      - Changes.md
      - LICENSE
      - README.md
      - UsingMyGet.md

pr: none # no pr trigger

variables:
  ReleasePackageVersion: 4.8.0-preview-$(Build.BuildNumber)
  MSBuildArguments: -p:SignAssembly=false -p:delaySign=false
  BuildPlatform: 'any cpu'
  BuildConfiguration: 'Release'
  Parameters.solution: Microsoft.Bot.Builder.sln
#  AzureSubscription: define this in Azure
#  WinTestBotAppId: define this in Azure
#  WinTestBotAppSecret: define this in Azure
#  WinTestBotBotGroup: define this in Azure
#  WinTestBotBotName: define this in Azure
#  WinTestBotTestAppId: define this in Azure
#  WinTestBotTestPassword: define this in Azure

steps:
- template: ci-build-steps.yml

- task: DotNetCoreCLI@2
  displayName: 'Dotnet Publish TestBot'
  inputs:
    command: publish
    publishWebProjects: false
    projects: '$(System.DefaultWorkingDirectory)\tests\Microsoft.Bot.Builder.TestBot\Microsoft.Bot.Builder.TestBot.csproj'
    arguments: '--output $(System.DefaultWorkingDirectory)\tests\Microsoft.Bot.Builder.TestBot\publishedbot'
    modifyOutputPath: false

- powershell: |
   echo '##vso[task.setvariable variable=AppId]$(WinTestBotAppId)'
   echo '##vso[task.setvariable variable=AppSecret]$(WinTestBotAppSecret)'
   echo '##vso[task.setvariable variable=BotGroup]$(WinTestBotBotGroup)'
   echo '##vso[task.setvariable variable=BotName]$(WinTestBotBotName)'
   echo '##vso[task.setvariable variable=TestAppId]$(WinTestBotTestAppId)'
   echo '##vso[task.setvariable variable=TestPassword]$(WinTestBotTestPassword)'
  displayName: 'Set Environment Variables'

- task: AzureCLI@1
  displayName: 'Create Resource Group, deploy bot, create DirectLine channel'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptLocation: inlineScript
    inlineScript: |
     call az deployment create --name "$(BotGroup)" --template-file "$(System.DefaultWorkingDirectory)\FunctionalTests\ExportedTemplate\template.json" --location "westus" --parameters appId=$(AppId) appSecret="$(AppSecret)" botId="$(BotName)" botSku=F0 newAppServicePlanName="$(BotName)" newWebAppName="$(BotName)" groupName="$(BotGroup)" groupLocation="westus" newAppServicePlanLocation="westus"
     call az webapp deployment source config-zip --resource-group "$(BotGroup)" --name "$(BotName)" --src "$(System.DefaultWorkingDirectory)\tests\Microsoft.Bot.Builder.TestBot\publishedbot\PublishedBot.zip"
     call az bot directline create -n "$(BotName)" -g "$(BotGroup)" > "$(System.DefaultWorkingDirectory)\DirectLineCreate.json"

- powershell: |
   $json = Get-Content '$(System.DefaultWorkingDirectory)\DirectLineCreate.json' | Out-String | ConvertFrom-Json
   $key = $json.properties.properties.sites.key
   echo "##vso[task.setvariable variable=DIRECTLINE;]$key"
   echo "##vso[task.setvariable variable=BOTID;]$(BotName)"
  displayName: 'Get Bot Keys'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test
    projects: |
     **/**Tests.csproj
     !**/Microsoft.Bot.Builder.Classic.Tests.csproj
     !**/Microsoft.Bot.ApplicationInsights.WebApi.Tests.csproj
     !**/Microsoft.Bot.Builder.Integration.AspNet.WebApi.Tests.csproj
    arguments: '-v n --configuration $(BuildConfiguration) --no-build --no-restore --filter "TestCategory=FunctionalTests&TestCategory!=Adapters"'
    workingDirectory: tests

- task: AzureCLI@1
  displayName: 'Delete Resources'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptLocation: inlineScript
    inlineScript: 'call az group delete -n "$(BotGroup)" --yes'
  condition: and(always(), ne(variables['DeleteResourceGroup'], 'false'))