// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using System.Dynamic;
using System.IO;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Bot.Builder.AI.Luis;
using Microsoft.Bot.Builder.Dialogs;
using Newtonsoft.Json;
using RichardSzalay.MockHttp;

namespace Microsoft.Bot.Builder.MockLuis
{
    /// <summary>
    /// Test class for creating cached LUIS responses for testing.
    /// </summary>
    /// <remarks>
    /// This will either use a cached LUIS response or generate a new one by calling LUIS.
    /// </remarks>
    public class MockLuisRecognizer : Recognizer
    {
        private string _responseDir;
        private string _name;

        /// <summary>
        /// Initializes a new instance of the <see cref="MockLuisRecognizer"/> class.
        /// </summary>
        /// <param name="resourceDir">Where the settings file generated by lubuild is found.</param>
        /// <param name="name">Name of the LUIS model.</param>
        /// <param name="options">LUIS options.</param>
        public MockLuisRecognizer(
            LuisRecognizerOptionsV3 options,
            string resourceDir,
            string name)
        {
            _responseDir = Path.Combine(resourceDir, "cachedResponses", name);
            _name = name;
            PredictionOptions = options;
            PredictionOptions.IncludeAPIResults = true;
            if (!Directory.Exists(_responseDir))
            {
                Directory.CreateDirectory(_responseDir);
            }
        }

        /// <summary>
        /// Gets or sets prediction options.
        /// </summary>
        /// <value>Prediction options.</value>
        [JsonProperty("predictionOptions")]
        public LuisRecognizerOptionsV3 PredictionOptions { get; set; }

        public override async Task<RecognizerResult> RecognizeAsync(DialogContext dialogContext, string text, string locale, CancellationToken cancellationToken = default)
        {
            var client = GetMockedClient(text, PredictionOptions);
            var recognizer = new LuisRecognizer(PredictionOptions, client);
            var result = await recognizer.RecognizeAsync(dialogContext, text, locale, cancellationToken);
            if (client == null)
            {
                // Save response
                var outPath = ResponsePath(text, PredictionOptions);
                File.WriteAllText(outPath, JsonConvert.SerializeObject(result.Properties["luisResult"]));
            }

            return result;
        }

        private string ResponsePath(string utterance, LuisRecognizerOptionsV3 options)
        {
            var hash = utterance.StableHash();
            if (options.ExternalEntityRecognizer != null)
            {
                hash ^= "external".StableHash();
            }

            if (options.IncludeAPIResults)
            {
                hash ^= "api".StableHash();
            }

            if (options.LogPersonalInformation)
            {
                hash ^= "personal".StableHash();
            }

            var poptions = options.PredictionOptions;
            if (poptions.DynamicLists != null)
            {
                foreach (var dynamicList in poptions.DynamicLists)
                {
                    hash ^= dynamicList.Entity.StableHash();
                    foreach (var choices in dynamicList.List)
                    {
                        hash ^= choices.CanonicalForm.StableHash();
                        foreach (var synonym in choices.Synonyms)
                        {
                            hash ^= synonym.StableHash();
                        }
                    }
                }
            }
            
            // TODO: This needs to be changed when propertyexpression comes in
            if (poptions.DynamicListsExpression != null)
            {
                hash ^= "dynamic".StableHash();
            }

            if (poptions.ExternalEntities != null)
            {
                foreach (var external in poptions.ExternalEntities)
                {
                    hash ^= external.Entity.StableHash();
                }
            }

            if (poptions.IncludeAllIntents)
            {
                hash ^= "all".StableHash();
            }

            if (poptions.IncludeInstanceData)
            {
                hash ^= "instance".StableHash();
            }

            if (poptions.Log ?? false)
            {
                hash ^= "log".StableHash();
            }

            if (poptions.PreferExternalEntities)
            {
                hash ^= "prefer".StableHash();
            }

            if (poptions.Slot != null)
            {
                hash ^= poptions.Slot.StableHash();
            }

            if (poptions.Version != null)
            {
                hash ^= poptions.Version.StableHash();
            }

            return Path.Combine(_responseDir, $"{hash}.json");
        }

        private HttpClientHandler GetMockedClient(string utterance, LuisRecognizerOptionsV3 options)
        {
            HttpClientHandler client = null;
            if (utterance != null)
            {
                var response = ResponsePath(utterance, options);
                if (File.Exists(response))
                {
                    var handler = new MockHttpMessageHandler();
                    handler
                        .When(PredictionOptions.Application.Endpoint + "*")
                        .WithPartialContent(utterance)
                        .Respond("application/json", File.OpenRead(response));
                    client = new MockedHttpClientHandler(handler.ToHttpClient());
                }
            }

            return client;
        }
    }
}
